"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[3504],{2437:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>a});var r=t(4848),o=t(8453);const s={title:"Contexts",sidebar_label:"Contexts",description:"Using contexts to pass data within application"},c=void 0,i={id:"concepts/contexts",title:"Contexts",description:"Using contexts to pass data within application",source:"@site/versioned_docs/version-0.19.0/concepts/contexts.mdx",sourceDirName:"concepts",slug:"/concepts/contexts",permalink:"/demo/ja/docs/0.19.0/concepts/contexts",draft:!1,unlisted:!1,editUrl:"https://google.com/versioned_docs/version-0.19.0/concepts/contexts.mdx",tags:[],version:"0.19.0",frontMatter:{title:"Contexts",sidebar_label:"Contexts",description:"Using contexts to pass data within application"},sidebar:"docs",previous:{title:"Agents",permalink:"/demo/ja/docs/0.19.0/concepts/agents"},next:{title:"Router",permalink:"/demo/ja/docs/0.19.0/concepts/router"}},l={},a=[{value:"Using Contexts",id:"using-contexts",level:2},{value:"Consuming context",id:"consuming-context",level:3},{value:"Struct components",id:"struct-components",level:4},{value:"Example",id:"example",level:5},{value:"Function components",id:"function-components",level:4}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Generally data is passed down the component tree using props but that becomes tedious for values such as\r\nuser preferences, authentication information etc. Consider the following example which passes down the\r\ntheme using props:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use yew::{html, Children, Component, Context, Html, Properties};\r\n\r\n#[derive(Clone, PartialEq)]\r\npub struct Theme {\r\n    foreground: String,\r\n    background: String,\r\n}\r\n\r\n#[derive(PartialEq, Properties)]\r\npub struct NavbarProps {\r\n    theme: Theme,\r\n}\r\n\r\npub struct Navbar;\r\n\r\nimpl Component for Navbar {\r\n    type Message = ();\r\n    type Properties = NavbarProps;\r\n\r\n    fn create(_ctx: &Context<Self>) -> Self {\r\n        Self\r\n    }\r\n\r\n    fn view(&self, ctx: &Context<Self>) -> Html {\r\n        html! {\r\n            <div>\r\n                <Title theme={ctx.props().theme.clone()}>\r\n                    { "App title" }\r\n                </Title>\r\n                <NavButton theme={ctx.props().theme.clone()}>\r\n                    { "Somewhere" }\r\n                </NavButton>\r\n            </div>\r\n        }\r\n    }\r\n}\r\n\r\n#[derive(PartialEq, Properties)]\r\npub struct ThemeProps {\r\n    theme: Theme,\r\n    children: Children,\r\n}\r\n\r\n#[yew::function_component(Title)]\r\nfn title(_props: &ThemeProps) -> Html {\r\n    html! {\r\n        // impl\r\n    }\r\n}\r\n#[yew::function_component(NavButton)]\r\nfn nav_button(_props: &ThemeProps) -> Html {\r\n    html! {\r\n        // impl\r\n    }\r\n}\r\n\r\n// root\r\nlet theme = Theme {\r\n    foreground: "yellow".to_owned(),\r\n    background: "pink".to_owned(),\r\n};\r\n\r\nhtml! {\r\n    <Navbar {theme} />\r\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"Passing down data like this isn't ideal for something like a theme which needs to be available everywhere.\r\nThis is where contexts come in."}),"\n",(0,r.jsx)(n.p,{children:"Contexts provide a way to share data between components without passing them down explicitly as props.\r\nThey make data available to all components in the tree."}),"\n",(0,r.jsx)(n.h2,{id:"using-contexts",children:"Using Contexts"}),"\n",(0,r.jsx)(n.p,{children:"In order to use contexts, we need a struct which defines what data is to be passed.\r\nFor the above use-case, consider the following struct:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"#[derive(Clone, Debug, PartialEq)]\r\nstruct Theme {\r\n    foreground: String,\r\n    background: String,\r\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["A context provider is required to consume the context. ",(0,r.jsx)(n.code,{children:"ContextProvider<T>"}),", where ",(0,r.jsx)(n.code,{children:"T"})," is the context struct is used as the provider.\r\n",(0,r.jsx)(n.code,{children:"T"})," must implement ",(0,r.jsx)(n.code,{children:"Clone"})," and ",(0,r.jsx)(n.code,{children:"PartialEq"}),". ",(0,r.jsx)(n.code,{children:"ContextProvider"})," is the component whose children will have the context available to them.\r\nThe children are re-rendered when the context changes."]}),"\n",(0,r.jsx)(n.h3,{id:"consuming-context",children:"Consuming context"}),"\n",(0,r.jsx)(n.h4,{id:"struct-components",children:"Struct components"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Scope::context"})," method is used to consume contexts in struct components."]}),"\n",(0,r.jsx)(n.h5,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use yew::{Callback, html, Component, Context, Html};\r\n\r\n#[derive(Clone, Debug, PartialEq)]\r\nstruct Theme {\r\n    foreground: String,\r\n    background: String,\r\n}\r\n\r\nstruct ContextDemo;\r\n\r\nimpl Component for ContextDemo {\r\n    type Message = ();\r\n    type Properties = ();\r\n\r\n    fn create(_ctx: &Context<Self>) -> Self {\r\n        Self\r\n    }\r\n\r\n    fn view(&self, ctx: &Context<Self>) -> Html {\r\n        let (theme, _) = ctx\r\n            .link()\r\n            .context::<Theme>(Callback::noop())\r\n            .expect("context to be set");\r\n        html! {\r\n            <button style={format!(\r\n                    "background: {}; color: {};",\r\n                    theme.background,\r\n                    theme.foreground\r\n                )}\r\n            >\r\n                { "Click me!" }\r\n            </button>\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"function-components",children:"Function components"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"use_context"})," hook is used to consume contexts in function components.\r\nSee ",(0,r.jsx)(n.a,{href:"/demo/ja/docs/0.19.0/concepts/function-components/pre-defined-hooks#use_context",children:"docs for use_context"})," to learn more."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var r=t(6540);const o={},s=r.createContext(o);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);