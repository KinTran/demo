"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[7557],{1558:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=n(4848),r=n(8453);const s={title:"Deployment",description:"Deploying Yew applications"},o=void 0,a={id:"more/deployment",title:"Deployment",description:"Deploying Yew applications",source:"@site/versioned_docs/version-0.20/more/deployment.mdx",sourceDirName:"more",slug:"/more/deployment",permalink:"/demo/ja/docs/0.20/more/deployment",draft:!1,unlisted:!1,editUrl:"https://google.com/versioned_docs/version-0.20/more/deployment.mdx",tags:[],version:"0.20",frontMatter:{title:"Deployment",description:"Deploying Yew applications"},sidebar:"docs",previous:{title:"Debugging",permalink:"/demo/ja/docs/0.20/more/debugging"},next:{title:"CSS",permalink:"/demo/ja/docs/0.20/more/css"}},l={},d=[{value:"Server configuration",id:"server-configuration",level:2},{value:"Serving <code>index.html</code> as fallback",id:"serving-indexhtml-as-fallback",level:3},{value:"Configuring correct MIME-type for Web Assembly asset.",id:"configuring-correct-mime-type-for-web-assembly-asset",level:3},{value:"Building for Relative Paths",id:"building-for-relative-paths",level:2},{value:"Customizing behavior using environment variables",id:"customizing-behavior-using-environment-variables",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"When you are ready to deploy your Yew application to a server, you have various options for deployment."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"trunk build --release"})," builds your app in release mode. Set up your HTTP server so that it serves ",(0,i.jsx)(t.code,{children:"index.html"})," whenever your site is visited, and requests to static paths like ",(0,i.jsx)(t.code,{children:"index_<hash>.js"})," and ",(0,i.jsx)(t.code,{children:"index_bg_<hash>.wasm"})," are served with the contents of their respective contents from the dist directory generated by trunk."]}),"\n",(0,i.jsxs)(t.admonition,{type:"important",children:[(0,i.jsxs)(t.mdxAdmonitionTitle,{children:["A note about ",(0,i.jsx)(t.code,{children:"trunk serve --release"})]}),(0,i.jsxs)(t.p,{children:["Do ",(0,i.jsx)(t.strong,{children:"not"})," use ",(0,i.jsx)(t.code,{children:"trunk serve --release"})," to serve your application in production.\r\nIt should only be used for testing the release build during development"]})]}),"\n",(0,i.jsx)(t.h2,{id:"server-configuration",children:"Server configuration"}),"\n",(0,i.jsxs)(t.h3,{id:"serving-indexhtml-as-fallback",children:["Serving ",(0,i.jsx)(t.code,{children:"index.html"})," as fallback"]}),"\n",(0,i.jsxs)(t.p,{children:["If the application uses the ",(0,i.jsx)(t.a,{href:"/demo/ja/docs/0.20/concepts/router",children:"Yew router"}),", you must configure the server to return the ",(0,i.jsx)(t.code,{children:"index.html"})," when asked for a file that it does not have."]}),"\n",(0,i.jsxs)(t.p,{children:["An application with Yew router is built as a ",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/SPA",children:"Single Page Application (SPA)"}),". When the user navigates to a URL from within a running client, the router interprets the URL and routes to that page."]}),"\n",(0,i.jsx)(t.p,{children:"But on a fresh load, such as when navigating to the page by entering it in the address bar or refreshing the page, all of these actions are handled by the browser itself, outside the running application. The browser makes a direct request to the server for that URL, bypassing the router. A wrongly configured server would return with status 404 - Not Found."}),"\n",(0,i.jsxs)(t.p,{children:["By returning ",(0,i.jsx)(t.code,{children:"index.html"})," instead, the app loads as it normally would as if request was for ",(0,i.jsx)(t.code,{children:"/"}),", until the router notices that the route is ",(0,i.jsx)(t.code,{children:"/show/42"})," and displays the appropriate contents."]}),"\n",(0,i.jsx)(t.h3,{id:"configuring-correct-mime-type-for-web-assembly-asset",children:"Configuring correct MIME-type for Web Assembly asset."}),"\n",(0,i.jsxs)(t.p,{children:["The WASM files must be served with the ",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type",children:"Content-Type header"})," set to ",(0,i.jsx)(t.code,{children:"application/wasm"})," MIME-type."]}),"\n",(0,i.jsx)(t.p,{children:"Most servers and hosting services already do this by default. If yours doesn't, consult its documentation. An incorrect MIME-type will, in most web browsers, result in an error similar to the following:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ignore",children:"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\r\n TypeError: WebAssembly: Response has unsupported MIME type 'text/plain' expected 'application/wasm'\n"})}),"\n",(0,i.jsx)(t.h2,{id:"building-for-relative-paths",children:"Building for Relative Paths"}),"\n",(0,i.jsxs)(t.p,{children:["By default, trunk will assume that your site is being served at ",(0,i.jsx)(t.code,{children:"/"})," and build the site accordingly. This behavior can be overridden by adding ",(0,i.jsx)(t.code,{children:"<base data-trunk-public-url />"})," to the ",(0,i.jsx)(t.code,{children:"index.html"})," file. Trunk rewrites this tag to contain the value passed to ",(0,i.jsx)(t.code,{children:"--public-url"}),". Yew router automatically detects the presence of ",(0,i.jsx)(t.code,{children:"<base />"})," and handles it appropriately."]}),"\n",(0,i.jsx)(t.h2,{id:"customizing-behavior-using-environment-variables",children:"Customizing behavior using environment variables"}),"\n",(0,i.jsxs)(t.p,{children:["It's common to customize the build environment by using environment variables. Since the app is run in browser, we can't read the environment variables at runtime.\r\nThe ",(0,i.jsx)(t.a,{href:"https://doc.rust-lang.org/std/macro.env.html",children:(0,i.jsx)(t.code,{children:"std::env!"})})," macro can be used to obtain a value of an environment variables at compile time."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(6540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);