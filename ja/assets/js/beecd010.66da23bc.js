"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[8059],{6455:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(4848),i=t(8453);const o={title:"Tips for developing Yew applications"},s=void 0,l={id:"more/development-tips",title:"Tips for developing Yew applications",description:"This document only contains information for adding supporting in Jetbrains IDEs and VS Code.",source:"@site/versioned_docs/version-0.19.0/more/development-tips.mdx",sourceDirName:"more",slug:"/more/development-tips",permalink:"/demo/ja/docs/0.19.0/more/development-tips",draft:!1,unlisted:!1,editUrl:"https://google.com/versioned_docs/version-0.19.0/more/development-tips.mdx",tags:[],version:"0.19.0",frontMatter:{title:"Tips for developing Yew applications"},sidebar:"docs",previous:{title:"Debugging",permalink:"/demo/ja/docs/0.19.0/more/debugging"},next:{title:"External libraries",permalink:"/demo/ja/docs/0.19.0/more/external-libs"}},a={},d=[{value:"Add a template for creating components",id:"add-a-template-for-creating-components",level:2},{value:"Jetbrains IDEs",id:"jetbrains-ides",level:3},{value:"VS Code",id:"vs-code",level:3},{value:"Support for the <code>html!</code> Macro",id:"support-for-the-html-macro",level:2},{value:"Jetbrains IDEs",id:"jetbrains-ides-1",level:3},{value:"VS Code",id:"vs-code-1",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{title:"contribute",type:"important",children:(0,r.jsx)(n.p,{children:"This document only contains information for adding supporting in Jetbrains IDEs and VS Code.\r\nFeel free to contribute to add instructions for your editor of choice."})}),"\n",(0,r.jsx)(n.h2,{id:"add-a-template-for-creating-components",children:"Add a template for creating components"}),"\n",(0,r.jsx)(n.h3,{id:"jetbrains-ides",children:"Jetbrains IDEs"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Navigate to File | Settings | Editor | Live Templates."}),"\n",(0,r.jsx)(n.li,{children:"Select Rust and click on + icon to add a new Live Template."}),"\n",(0,r.jsx)(n.li,{children:"Give it a name and description of your preference."}),"\n",(0,r.jsx)(n.li,{children:"Paste the following snippet in Template Text section"}),"\n",(0,r.jsx)(n.li,{children:"Change the applicability on the lower right, select Rust > Item > Module"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:",ignore",children:"use yew::prelude::*;\r\n\r\nstruct $NAME$;\r\n\r\nenum Msg {\r\n}\r\n\r\nimpl Component for $NAME$ {\r\n    type Message = Msg;\r\n    type Properties = ();\r\n\r\n    fn create(ctx: &Context<Self>) -> Self {\r\n        Self\r\n    }\r\n\r\n    fn view(&self, ctx: &Context<Self>) -> Html {\r\n        html! {\r\n            $HTML$\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"For functional components, use the template below. Additionaly:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Click on Edit Variable"}),"\n",(0,r.jsxs)(n.li,{children:["In the ",(0,r.jsx)(n.code,{children:"func_name"})," row, set the Expression column to ",(0,r.jsx)(n.code,{children:"snakeCase(NAME)"})," so that ",(0,r.jsx)(n.code,{children:"ComponentName"})," will be automatically\r\nfilled as ",(0,r.jsx)(n.code,{children:"component_name"}),"\r\nin the function definition."]}),"\n",(0,r.jsxs)(n.li,{children:["In the ",(0,r.jsx)(n.code,{children:"func_name"}),' row, check "skip if defined" so this autogenerated field won\'t be navigated to.']}),"\n",(0,r.jsxs)(n.li,{children:["(Optional) give ",(0,r.jsx)(n.code,{children:"tag"}),' a reasonable default value like "div", with double quotes.']}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:",ignore",children:"#[derive(Properties, PartialEq, Clone)]\r\npub struct $Name$Props {\r\n}\r\n\r\n#[function_component($Name$)]\r\npub fn $func_name$(props: &$Name$Props) -> Html {\r\n\r\n\r\n    html! {\r\n        <$tag$>$END$</$tag$>\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"vs-code",children:"VS Code"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Navigate to File > Preferences > User Snippets."}),"\n",(0,r.jsx)(n.li,{children:"Select Rust as the language."}),"\n",(0,r.jsx)(n.li,{children:"Add the following snippet in the snippet JSON file:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\r\n    "Create new Yew component": {\r\n        "prefix": "YOUR PREFIX OF CHOICE",\r\n        "body": [\r\n            "use yew::prelude::*;",\r\n            "",\r\n            "pub struct ${1};",\r\n            "",\r\n            "pub enum Msg {",\r\n            "}",\r\n            "",\r\n            "impl Component for ${1} {",\r\n            "    type Message = Msg;",\r\n            "    type Properties = ();",\r\n            "",\r\n            "    fn create(ctx: &Context<Self>) -> Self {",\r\n            "        Self",\r\n            "    }",\r\n            "",\r\n            "    fn view(&self, ctx: &Context<Self>) -> Html {",\r\n            "        html! {",\r\n            "            ${0}",\r\n            "        }",\r\n            "    }",\r\n            "}"\r\n        ],\r\n        "description": "Create a new Yew component without properties but with a message enum"\r\n    }\r\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"support-for-the-html-macro",children:["Support for the ",(0,r.jsx)(n.code,{children:"html!"})," Macro"]}),"\n",(0,r.jsx)(n.h3,{id:"jetbrains-ides-1",children:"Jetbrains IDEs"}),"\n",(0,r.jsxs)(n.p,{children:["Since April 2021, Jetbrains has started to support proc-macro expansion as an experimental feature.\r\nThe user has to manually enable it.\r\n",(0,r.jsx)(n.a,{href:"https://blog.jetbrains.com/rust/2021/04/08/intellij-rust-updates-for-2021-1/#proc-macros",children:"See the post here."})]}),"\n",(0,r.jsx)(n.p,{children:"This still won't enable html autofill and formatting help, but will enable variable resolution for\r\ncomponent names and attributes inside the macro.\r\nUtilities like Rename, Go to Declaration, Find Usages will work inside the macro."}),"\n",(0,r.jsx)(n.h3,{id:"vs-code-1",children:"VS Code"}),"\n",(0,r.jsxs)(n.p,{children:["There's no support for specialized syntax of ",(0,r.jsx)(n.code,{children:"html!"})," but you can use the default HTML IntelliSense by adding the following snippet in your VS Code's ",(0,r.jsx)(n.code,{children:"settings.json"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"emmet.includeLanguages": {\r\n    "rust": "html",\r\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);