"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[2315],{3883:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(4848),s=t(8453);const r={title:"Custom Hooks"},c=void 0,i={id:"concepts/function-components/hooks/custom-hooks",title:"Custom Hooks",description:"Defining custom Hooks",source:"@site/versioned_docs/version-0.21/concepts/function-components/hooks/custom-hooks.mdx",sourceDirName:"concepts/function-components/hooks",slug:"/concepts/function-components/hooks/custom-hooks",permalink:"/zh-Hant/docs/concepts/function-components/hooks/custom-hooks",draft:!1,unlisted:!1,editUrl:"https://google.com/versioned_docs/version-0.21/concepts/function-components/hooks/custom-hooks.mdx",tags:[],version:"0.21",frontMatter:{title:"Custom Hooks"},sidebar:"docs",previous:{title:"Hooks",permalink:"/zh-Hant/docs/concepts/function-components/hooks"},next:{title:"Node Refs",permalink:"/zh-Hant/docs/concepts/function-components/node-refs"}},a={},l=[{value:"Defining custom Hooks",id:"defining-custom-hooks",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"defining-custom-hooks",children:"Defining custom Hooks"}),"\n",(0,o.jsx)(n.p,{children:"The stateful logic of a component can be extracted into reusable functions by creating custom Hooks."}),"\n",(0,o.jsxs)(n.p,{children:["Consider that we wish to create an event listener that listens to an event on the ",(0,o.jsx)(n.code,{children:"window"}),"\r\nobject."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'use yew::prelude::*;\r\nuse gloo::events::EventListener;\r\nuse gloo::utils::window;\r\nuse std::mem::drop;\r\n\r\n\r\n#[function_component(ShowStorageChanged)]\r\npub fn show_storage_changed() -> Html {\r\n    let state_storage_changed = use_state(|| false);\r\n\r\n    {\r\n        let state_storage_changed = state_storage_changed.clone();\r\n        use_effect(|| {\r\n            let listener = EventListener::new(&window(), "storage", move |_| state_storage_changed.set(true));\r\n\r\n            move || { drop(listener); }\r\n        });\r\n    }\r\n\r\n    html! { <div>{"Storage Event Fired: "}{*state_storage_changed}</div> }\r\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"There's one problem with this code: the logic can't be reused by another component.\r\nIf we build another component that listens to a different event,\r\ninstead of copying the code, we can move the logic into a custom hook."}),"\n",(0,o.jsxs)(n.p,{children:["We'll start by creating a new function called ",(0,o.jsx)(n.code,{children:"use_event"}),".\r\nThe ",(0,o.jsx)(n.code,{children:"use_"})," prefix denotes that a function is a hook.\r\nThis function will take an event target, an event type, and a callback.\r\nAll hooks must be marked by ",(0,o.jsx)(n.code,{children:"#[hook]"})," on their function definition."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"use web_sys::{Event, EventTarget};\r\nuse std::borrow::Cow;\r\nuse gloo::events::EventListener;\r\nuse yew::prelude::*;\r\n\r\n#[hook]\r\npub fn use_event<E, F>(target: &EventTarget, event_type: E, callback: F)\r\nwhere\r\n    E: Into<Cow<'static, str>>,\r\n    F: Fn(&Event) + 'static,\r\n{\r\n    todo!()\r\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This simple hook can be created by composing built-in hooks. For this example, we'll use the\r\n",(0,o.jsx)(n.code,{children:"use_effect_with"})," hook, so an event listener can be recreated when the hook arguments change."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"use yew::prelude::*;\r\nuse web_sys::{Event, EventTarget};\r\nuse std::borrow::Cow;\r\nuse std::rc::Rc;\r\nuse gloo::events::EventListener;\r\n\r\n#[hook]\r\npub fn use_event<E, F>(target: &EventTarget, event_type: E, callback: F)\r\nwhere\r\n    E: Into<Cow<'static, str>>,\r\n    F: Fn(Event) + 'static,\r\n{\r\n    #[derive(PartialEq, Clone)]\r\n    struct EventDependents {\r\n        target: EventTarget,\r\n        event_type: Cow<'static, str>,\r\n        callback: Callback<Event>,\r\n    }\r\n\r\n    let deps = EventDependents {\r\n        target: target.clone(),\r\n        event_type: event_type.into(),\r\n        callback: Callback::from(callback),\r\n    };\r\n\r\n    use_effect_with(\r\n        deps,\r\n        |deps| {\r\n            let EventDependents {\r\n                target,\r\n                event_type,\r\n                callback,\r\n            } = deps.clone();\r\n\r\n            let listener = EventListener::new(&target, event_type, move |e| {\r\n                callback.emit(e.clone());\r\n            });\r\n\r\n            move || {\r\n                drop(listener);\r\n            }\r\n        },\r\n    );\r\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Although this approach works in almost all cases, it can't be used to write primitive hooks like the pre-defined hooks we've been using already."}),"\n",(0,o.jsxs)(n.p,{children:["View the docs on ",(0,o.jsx)(n.a,{href:"https://docs.rs/yew",children:"docs.rs"})," for documentation and ",(0,o.jsx)(n.code,{children:"hooks"})," directory to see implementations of pre-defined hooks."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var o=t(6540);const s={},r=o.createContext(s);function c(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);