"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[5770],{8125:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=s(4848),r=s(8453);const i={title:"Literals and Expressions"},o=void 0,l={id:"concepts/html/literals-and-expressions",title:"Literals and Expressions",description:"Literals",source:"@site/versioned_docs/version-0.19.0/concepts/html/literals-and-expressions.mdx",sourceDirName:"concepts/html",slug:"/concepts/html/literals-and-expressions",permalink:"/zh-Hans/docs/0.19.0/concepts/html/literals-and-expressions",draft:!1,unlisted:!1,editUrl:"https://google.com/versioned_docs/version-0.19.0/concepts/html/literals-and-expressions.mdx",tags:[],version:"0.19.0",frontMatter:{title:"Literals and Expressions"},sidebar:"docs",previous:{title:"Lists",permalink:"/zh-Hans/docs/0.19.0/concepts/html/lists"},next:{title:"Introduction",permalink:"/zh-Hans/docs/0.19.0/concepts/function-components/introduction"}},a={},c=[{value:"Literals",id:"literals",level:2},{value:"Expressions",id:"expressions",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"literals",children:"Literals"}),"\n",(0,t.jsxs)(n.p,{children:["If expressions resolve to types that implement ",(0,t.jsx)(n.code,{children:"Display"}),", they will be converted to strings and inserted into the DOM as a ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Text",children:"Text"})," node."]}),"\n",(0,t.jsxs)(n.p,{children:["All display text must be enclosed by ",(0,t.jsx)(n.code,{children:"{}"})," blocks because text is handled as an expression. This is\r\nthe largest deviation from normal HTML syntax that Yew makes."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use yew::html;\r\n\r\nlet text = "lorem ipsum";\r\nhtml!{\r\n    <>\r\n        <div>{text}</div>\r\n        <div>{"dolor sit"}</div>\r\n        <span>{42}</span>\r\n    </>\r\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"expressions",children:"Expressions"}),"\n",(0,t.jsxs)(n.p,{children:["You can insert expressions in your HTML using ",(0,t.jsx)(n.code,{children:"{}"})," blocks, as long as they resolve to ",(0,t.jsx)(n.code,{children:"Html"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use yew::html;\r\n\r\nlet show_link = true;\r\n\r\nhtml! {\r\n  <div>\r\n    {\r\n      if show_link {\r\n        html! {\r\n          <a href="https://example.com">{"Link"}</a>\r\n        }\r\n      } else {\r\n        html! {}\r\n      }\r\n    }\r\n  </div>\r\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"It often makes sense to extract these expressions into functions or closures to optimize for readability:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use yew::{html, Html};\r\n\r\nlet show_link = true;\r\nlet maybe_display_link = move || -> Html {\r\n  if show_link {\r\n    html! {\r\n      <a href="https://example.com">{"Link"}</a>\r\n    }\r\n  } else {\r\n    html! {}\r\n  }\r\n};\r\n\r\nhtml! {\r\n     <div>{maybe_display_link()}</div>\r\n};\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(6540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);