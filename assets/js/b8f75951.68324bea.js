"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[3624],{6502:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>a,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var t=o(4848),s=o(8453);const r={title:"Pure Components"},i=void 0,c={id:"concepts/function-components/pure-components",title:"Pure Components",description:"A function component is considered [pure] when the returned Html is deterministically derived",source:"@site/docs/concepts/function-components/pure-components.mdx",sourceDirName:"concepts/function-components",slug:"/concepts/function-components/pure-components",permalink:"/docs/next/concepts/function-components/pure-components",draft:!1,unlisted:!1,editUrl:"https://google.com/docs/concepts/function-components/pure-components.mdx",tags:[],version:"current",frontMatter:{title:"Pure Components"},sidebar:"docs",previous:{title:"Children",permalink:"/docs/next/concepts/function-components/children"},next:{title:"Hooks",permalink:"/docs/next/concepts/function-components/hooks"}},p={},d=[{value:"Impure components",id:"impure-components",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["A function component is considered ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Pure_function",children:"pure"})," when the returned ",(0,t.jsx)(n.code,{children:"Html"})," is deterministically derived\r\nfrom its props when its view function does not mutate its state or has other side effects."]}),"\n",(0,t.jsxs)(n.p,{children:["The example below is a pure component. For a given prop ",(0,t.jsx)(n.code,{children:"is_loading"})," it will always result in the same ",(0,t.jsx)(n.code,{children:"Html"})," without any side effects."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use yew::{Properties, function_component, Html, html};\r\n\r\n#[derive(Properties, PartialEq)]\r\npub struct Props {\r\n    pub is_loading: bool,\r\n}\r\n\r\n#[function_component]\r\nfn HelloWorld(props: &Props) -> Html {\r\n    if props.is_loading {\r\n        html! { "Loading" }\r\n    } else {\r\n        html! { "Hello world" }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["If you have an internal pure component that makes no use of hooks and other component machinery, you can often write it instead\r\nas a normal function returning ",(0,t.jsx)(n.code,{children:"Html"})," and avoid a bit of overhead for Yew, related to running the component lifecycle. Use\r\n",(0,t.jsx)(n.a,{href:"/docs/next/concepts/html/literals-and-expressions#expressions",children:"expression syntax"})," to render them in ",(0,t.jsx)(n.code,{children:"html!"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"impure-components",children:"Impure components"}),"\n",(0,t.jsxs)(n.p,{children:["You might wonder if a component can be impure if it does not use any globals, since it is just a function that is called every render.\r\nThis is where the next topic comes in - ",(0,t.jsx)(n.a,{href:"./hooks",children:"hooks"})]})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>c});var t=o(6540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);