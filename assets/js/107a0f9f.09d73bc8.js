"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[5703],{2239:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>h});var s=t(4848),i=t(8453),o=t(6025),r=t(1122);const a={title:"Agents",description:"Yew's Actor System"},c=void 0,d={id:"concepts/agents",title:"Agents",description:"Yew's Actor System",source:"@site/docs/concepts/agents.mdx",sourceDirName:"concepts",slug:"/concepts/agents",permalink:"/demo/docs/next/concepts/agents",draft:!1,unlisted:!1,editUrl:"https://google.com/docs/concepts/agents.mdx",tags:[],version:"current",frontMatter:{title:"Agents",description:"Yew's Actor System"},sidebar:"docs",previous:{title:"Conditional rendering",permalink:"/demo/docs/next/concepts/html/conditional-rendering"},next:{title:"Contexts",permalink:"/demo/docs/next/concepts/contexts"}},l={},h=[{value:"Lifecycle",id:"lifecycle",level:2},{value:"Types of Agents",id:"types-of-agents",level:2},{value:"Reaches",id:"reaches",level:3},{value:"Communication between Agents and Components",id:"communication-between-agents-and-components",level:2},{value:"Bridges",id:"bridges",level:3},{value:"Dispatchers",id:"dispatchers",level:3},{value:"Overhead",id:"overhead",level:2},{value:"Further reading",id:"further-reading",level:2}];function g(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Agents are a way to offload tasks to web workers."}),"\n",(0,s.jsxs)(n.p,{children:["In order for agents to run concurrently, Yew uses\r\n",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers",children:"web-workers"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,s.jsx)(r.A,{alt:"agent lifecycle diagram",sources:{light:(0,o.Ay)("/img/agent-lifecycle-light.svg"),dark:(0,o.Ay)("/img/agent-lifecycle-dark.svg")}}),"\n",(0,s.jsx)(n.h2,{id:"types-of-agents",children:"Types of Agents"}),"\n",(0,s.jsx)(n.h3,{id:"reaches",children:"Reaches"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Public - There will exist at most one instance of a Public Agent at any given time. Bridges will\r\nspawn or connect to an already spawned agent in a web worker.\r\nWhen no bridges are connected to this agent, the agent will disappear."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Private - Spawn a new agent in a web worker for every new bridge. This is good for moving shared but\r\nindependent behavior that communicates with the browser out of components. When\r\nthe connected bridge is dropped, the agent will disappear."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Global (WIP)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"communication-between-agents-and-components",children:"Communication between Agents and Components"}),"\n",(0,s.jsx)(n.h3,{id:"bridges",children:"Bridges"}),"\n",(0,s.jsx)(n.p,{children:"A bridge allows bi-directional communication between an agent and a component. Bridges also allow agents to communicate with one another."}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"use_bridge"})," hook is also provided to create bridges in a function component."]}),"\n",(0,s.jsx)(n.h3,{id:"dispatchers",children:"Dispatchers"}),"\n",(0,s.jsx)(n.p,{children:"A dispatcher allows uni-directional communication between a component and an agent. A dispatcher allows a component to send messages to an agent."}),"\n",(0,s.jsx)(n.h2,{id:"overhead",children:"Overhead"}),"\n",(0,s.jsxs)(n.p,{children:["Agents use web workers (i.e. Private and Public). They incur a serialization overhead on the\r\nmessages they send and receive. Agents use ",(0,s.jsx)(n.a,{href:"https://github.com/bincode-org/bincode",children:"bincode"})," to communicate\r\nwith other threads, so the cost is substantially higher than just calling a function."]}),"\n",(0,s.jsx)(n.h2,{id:"further-reading",children:"Further reading"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.a,{href:"https://github.com/yewstack/yew/tree/master/examples/web_worker_fib",children:"web_worker_fib"})," example shows how\r\ncomponents can send messages to and receive messages from agents."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);