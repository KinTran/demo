"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[9136],{6301:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=t(4848),o=t(8453);const i={title:"Properties",description:"Parent to child communication"},s=void 0,l={id:"concepts/components/properties",title:"Properties",description:"Parent to child communication",source:"@site/versioned_docs/version-0.19.0/concepts/components/properties.mdx",sourceDirName:"concepts/components",slug:"/concepts/components/properties",permalink:"/docs/0.19.0/concepts/components/properties",draft:!1,unlisted:!1,editUrl:"https://google.com/versioned_docs/version-0.19.0/concepts/components/properties.mdx",tags:[],version:"0.19.0",frontMatter:{title:"Properties",description:"Parent to child communication"},sidebar:"docs",previous:{title:"Scope",permalink:"/docs/0.19.0/concepts/components/scope"},next:{title:"Children",permalink:"/docs/0.19.0/concepts/components/children"}},a={},c=[{value:"Derive macro",id:"derive-macro",level:2},{value:"Field attributes",id:"field-attributes",level:3},{value:"<code>#[prop_or_default]</code>",id:"prop_or_default",level:4},{value:"<code>#[prop_or(value)]</code>",id:"prop_orvalue",level:4},{value:"<code>#[prop_or_else(function)]</code>",id:"prop_or_elsefunction",level:4},{value:"<code>PartialEq</code>",id:"partialeq",level:2},{value:"Memory/speed overhead of using Properties",id:"memoryspeed-overhead-of-using-properties",level:2},{value:"Example",id:"example",level:2},{value:"Props macro",id:"props-macro",level:2}];function p(e){const r={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:["Properties enable child and parent components to communicate with each other.\r\nEvery component has an associated properties type which describes what is passed down from the parent.\r\nIn theory this can be any type that implements the ",(0,n.jsx)(r.code,{children:"Properties"})," trait, but in practice there's no\r\nreason for it to be anything but a struct where each field represents a property."]}),"\n",(0,n.jsx)(r.h2,{id:"derive-macro",children:"Derive macro"}),"\n",(0,n.jsxs)(r.p,{children:["Instead of implementing the ",(0,n.jsx)(r.code,{children:"Properties"})," trait yourself, you should use ",(0,n.jsx)(r.code,{children:"#[derive(Properties)]"})," to\r\nautomatically generate the implementation instead.\r\nTypes for which you derive ",(0,n.jsx)(r.code,{children:"Properties"})," must also implement ",(0,n.jsx)(r.code,{children:"PartialEq"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"field-attributes",children:"Field attributes"}),"\n",(0,n.jsxs)(r.p,{children:["When deriving ",(0,n.jsx)(r.code,{children:"Properties"}),", all fields are required by default.\r\nThe following attributes allow you to give your props initial values which will be used unless they're set to another value."]}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsx)(r.p,{children:"Attributes aren't visible in Rustdoc generated documentation.\r\nThe docstrings of your properties should mention whether a prop is optional and if it has a special default value."})}),"\n",(0,n.jsx)(r.h4,{id:"prop_or_default",children:(0,n.jsx)(r.code,{children:"#[prop_or_default]"})}),"\n",(0,n.jsxs)(r.p,{children:["Initialize the prop value with the default value of the field's type using the ",(0,n.jsx)(r.code,{children:"Default"})," trait."]}),"\n",(0,n.jsx)(r.h4,{id:"prop_orvalue",children:(0,n.jsx)(r.code,{children:"#[prop_or(value)]"})}),"\n",(0,n.jsxs)(r.p,{children:["Use ",(0,n.jsx)(r.code,{children:"value"})," to initialize the prop value. ",(0,n.jsx)(r.code,{children:"value"})," can be any expression that returns the field's type.\r\nFor example, to default a boolean prop to ",(0,n.jsx)(r.code,{children:"true"}),", use the attribute ",(0,n.jsx)(r.code,{children:"#[prop_or(true)]"}),"."]}),"\n",(0,n.jsx)(r.h4,{id:"prop_or_elsefunction",children:(0,n.jsx)(r.code,{children:"#[prop_or_else(function)]"})}),"\n",(0,n.jsxs)(r.p,{children:["Call ",(0,n.jsx)(r.code,{children:"function"})," to initialize the prop value. ",(0,n.jsx)(r.code,{children:"function"})," should have the signature ",(0,n.jsx)(r.code,{children:"FnMut() -> T"})," where ",(0,n.jsx)(r.code,{children:"T"})," is the field type."]}),"\n",(0,n.jsx)(r.h2,{id:"partialeq",children:(0,n.jsx)(r.code,{children:"PartialEq"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"Properties"})," require ",(0,n.jsx)(r.code,{children:"PartialEq"})," to be implemented. This is so that they can be compared by Yew to call the ",(0,n.jsx)(r.code,{children:"changed"})," method\r\nonly when they change."]}),"\n",(0,n.jsx)(r.h2,{id:"memoryspeed-overhead-of-using-properties",children:"Memory/speed overhead of using Properties"}),"\n",(0,n.jsx)(r.p,{children:"Internally properties are reference counted. This means that only a pointer is passed down the component tree for props.\r\nIt saves us from the cost of having to clone the entire props, which might be expensive."}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["Make use of ",(0,n.jsx)(r.code,{children:"AttrValue"})," which is our custom type for attribute values instead of defining them as String or another similar type."]})}),"\n",(0,n.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-rust",children:"use yew::Properties;\r\n/// Importing the AttrValue from virtual_dom\r\nuse yew::virtual_dom::AttrValue;\r\n\r\n#[derive(Clone, PartialEq)]\r\npub enum LinkColor {\r\n    Blue,\r\n    Red,\r\n    Green,\r\n    Black,\r\n    Purple,\r\n}\r\n\r\nfn create_default_link_color() -> LinkColor {\r\n    LinkColor::Blue\r\n}\r\n\r\n#[derive(Properties, PartialEq)]\r\npub struct LinkProps {\r\n    /// The link must have a target.\r\n    href: AttrValue,\r\n    /// Also notice that we're using AttrValue instead of String\r\n    text: AttrValue,\r\n    /// Color of the link. Defaults to `Blue`.\r\n    #[prop_or_else(create_default_link_color)]\r\n    color: LinkColor,\r\n    /// The view function will not specify a size if this is None.\r\n    #[prop_or_default]\r\n    size: Option<u32>,\r\n    /// When the view function doesn't specify active, it defaults to true.\r\n    #[prop_or(true)]\r\n    active: bool,\r\n}\n"})}),"\n",(0,n.jsx)(r.h2,{id:"props-macro",children:"Props macro"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"yew::props!"})," macro allows you to build properties the same way the ",(0,n.jsx)(r.code,{children:"html!"})," macro does it."]}),"\n",(0,n.jsxs)(r.p,{children:["The macro uses the same syntax as a struct expression except that you can't use attributes or a base expression (",(0,n.jsx)(r.code,{children:"Foo { ..base }"}),").\r\nThe type path can either point to the props directly (",(0,n.jsx)(r.code,{children:"path::to::Props"}),") or the associated properties of a component (",(0,n.jsx)(r.code,{children:"MyComp::Properties"}),")."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-rust",children:"use yew::{props, Properties, virtual_dom::AttrValue};\r\n\r\n#[derive(Clone, PartialEq)]\r\npub enum LinkColor {\r\n    Blue,\r\n    Red,\r\n    Green,\r\n    Black,\r\n    Purple,\r\n}\r\n\r\nfn create_default_link_color() -> LinkColor {\r\n    LinkColor::Blue\r\n}\r\n\r\n#[derive(Properties, PartialEq)]\r\npub struct LinkProps {\r\n    /// The link must have a target.\r\n    href: AttrValue,\r\n    /// Also notice that we're using AttrValue instead of String\r\n    text: AttrValue,\r\n    /// Color of the link. Defaults to `Blue`.\r\n    #[prop_or_else(create_default_link_color)]\r\n    color: LinkColor,\r\n    /// The view function will not specify a size if this is None.\r\n    #[prop_or_default]\r\n    size: Option<u32>,\r\n    /// When the view function doesn't specify active, it defaults to true.\r\n    #[prop_or(true)]\r\n    active: bool,\r\n}\r\n\r\nimpl LinkProps {\r\n    /// Notice that this function receives href and text as String\r\n    /// We can use `AttrValue::from` to convert it to a `AttrValue`\r\n    pub fn new_link_with_size(href: String, text: String, size: u32) -> Self {\r\n        // highlight-start\r\n        props! {LinkProps {\r\n            href: AttrValue::from(href),\r\n            text: AttrValue::from(text),\r\n            size,\r\n        }}\r\n        // highlight-end\r\n    }\r\n}\n"})})]})}function d(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>l});var n=t(6540);const o={},i=n.createContext(o);function s(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);