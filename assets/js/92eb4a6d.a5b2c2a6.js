"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[4756],{8518:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var t=n(4848),r=n(8453);const o={title:"Literals and Expressions"},i=void 0,l={id:"concepts/html/literals-and-expressions",title:"Literals and Expressions",description:"Literals",source:"@site/versioned_docs/version-0.18.0/concepts/html/literals-and-expressions.mdx",sourceDirName:"concepts/html",slug:"/concepts/html/literals-and-expressions",permalink:"/demo/docs/0.18.0/concepts/html/literals-and-expressions",draft:!1,unlisted:!1,editUrl:"https://google.com/versioned_docs/version-0.18.0/concepts/html/literals-and-expressions.mdx",tags:[],version:"0.18.0",frontMatter:{title:"Literals and Expressions"},sidebar:"docs",previous:{title:"Lists",permalink:"/demo/docs/0.18.0/concepts/html/lists"},next:{title:"Overview",permalink:"/demo/docs/0.18.0/concepts/services/introduction"}},c={},a=[{value:"Literals",id:"literals",level:2},{value:"Expressions",id:"expressions",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"literals",children:"Literals"}),"\n",(0,t.jsxs)(s.p,{children:["If expressions resolve to types that implement ",(0,t.jsx)(s.code,{children:"Display"}),", they will be converted to strings and\r\ninserted into the DOM as a ",(0,t.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Text",children:"Text"})," node."]}),"\n",(0,t.jsxs)(s.p,{children:["All display text must be enclosed by ",(0,t.jsx)(s.code,{children:"{}"})," blocks because the ",(0,t.jsx)(s.code,{children:"html!"})," macro parses text as a Rust\r\nexpression. This is the greatest deviation from the HTML specification that the ",(0,t.jsx)(s.code,{children:"html!"})," macro makes."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-rust",children:'use yew::html;\r\n\r\nlet text = "lorem ipsum";\r\nhtml!{\r\n    <>\r\n        <div>{text}</div>\r\n        <div>{"dolor sit"}</div>\r\n        <span>{42}</span>\r\n    </>\r\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"expressions",children:"Expressions"}),"\n",(0,t.jsxs)(s.p,{children:["You can insert expressions in your HTML using ",(0,t.jsx)(s.code,{children:"{}"})," blocks, as long as they resolve to ",(0,t.jsx)(s.code,{children:"Html"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-rust",children:'use yew::html;\r\n\r\nhtml! {\r\n  <div>\r\n    {\r\n      if show_link {\r\n        html! {\r\n          <a href="https://example.com">{"Link"}</a>\r\n        }\r\n      } else {\r\n        html! {}\r\n      }\r\n    }\r\n  </div>\r\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"It often makes sense to extract these expressions into separate functions or closures to make your\r\ncode more readable. This can also help to reduce code duplication by moving common elements of your\r\nUI into composable functions."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-rust",children:'use yew::{html, Html};\r\n\r\nlet show_link = true;\r\nlet maybe_display_link = move || -> Html {\r\n  if show_link {\r\n    html! {\r\n      <a href="https://example.com">{"Link"}</a>\r\n    }\r\n  } else {\r\n    html! {}\r\n  }\r\n};\r\n\r\nhtml! {\r\n     <div>{maybe_display_link()}</div>\r\n}\n'})})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var t=n(6540);const r={},o=t.createContext(r);function i(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);