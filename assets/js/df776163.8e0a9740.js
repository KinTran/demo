"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[4697],{3448:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var t=r(4848),s=r(8453);const o={title:"Components",description:"Create complex layouts with component hierarchies"},i=void 0,l={id:"concepts/html/components",title:"Components",description:"Create complex layouts with component hierarchies",source:"@site/versioned_docs/version-0.18.0/concepts/html/components.mdx",sourceDirName:"concepts/html",slug:"/concepts/html/components",permalink:"/demo/docs/0.18.0/concepts/html/components",draft:!1,unlisted:!1,editUrl:"https://google.com/versioned_docs/version-0.18.0/concepts/html/components.mdx",tags:[],version:"0.18.0",frontMatter:{title:"Components",description:"Create complex layouts with component hierarchies"},sidebar:"docs",previous:{title:"Introduction",permalink:"/demo/docs/0.18.0/concepts/html/introduction"},next:{title:"Elements",permalink:"/demo/docs/0.18.0/concepts/html/elements"}},c={},p=[{value:"Basic",id:"basic",level:2},{value:"Nested",id:"nested",level:2},{value:"Nested Children with Props",id:"nested-children-with-props",level:2},{value:"Relevant examples",id:"relevant-examples",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"basic",children:"Basic"}),"\n",(0,t.jsxs)(n.p,{children:["Any type that implements ",(0,t.jsx)(n.code,{children:"Component"})," can be used in the ",(0,t.jsx)(n.code,{children:"html!"})," macro:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use yew::html;\r\n\r\nhtml! {\r\n    <>\r\n        // No properties\r\n        <MyComponent />\r\n\r\n        // With Properties\r\n        <MyComponent prop1="lorem" prop2="ipsum" />\r\n\r\n        // With the whole set of props provided at once\r\n        <MyComponent with props />\r\n    </>\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"nested",children:"Nested"}),"\n",(0,t.jsxs)(n.p,{children:["Components can be passed children if they have a ",(0,t.jsx)(n.code,{children:"children"})," field in their ",(0,t.jsx)(n.code,{children:"Properties"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",metastring:'title="parent.rs"',children:'use yew::html;\r\n\r\nhtml! {\r\n    <Container id="container">\r\n        <h4>{ "Hi" }</h4>\r\n        <div>{ "Hello" }</div>\r\n    </Container>\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When using the ",(0,t.jsx)(n.code,{children:"with props"})," syntax, the children passed in the ",(0,t.jsx)(n.code,{children:"html!"})," macro overwrite the ones already present in the props."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use yew::{html, props, Children};\r\n\r\nlet props = yew::props!(Container::Properties {\r\n    id: "container-2",\r\n    children: Children::default(),\r\n});\r\nhtml! {\r\n    <Container with props>\r\n        // props.children will be overwritten with this\r\n        <span>{ "I am a child, as you can see" }</span>\r\n    </Container>\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here's the implementation of ",(0,t.jsx)(n.code,{children:"Container"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"use yew::{html, Children, Component, Html, Properties};\r\n\r\n#[derive(Properties, Clone)]\r\npub struct Props {\r\n    pub id: String,\r\n    pub children: Children,\r\n}\r\n\r\npub struct Container(Props);\r\nimpl Component for Container {\r\n    type Properties = Props;\r\n\r\n    // ...\r\n\r\n    fn view(&self) -> Html {\r\n       html! {\r\n           <div id=self.0.id.clone()>\r\n               { self.0.children.clone() }\r\n           </div>\r\n       }\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"nested-children-with-props",children:"Nested Children with Props"}),"\n",(0,t.jsxs)(n.p,{children:["Nested component properties can be accessed and mutated if the containing component types its children. In the following example, the ",(0,t.jsx)(n.code,{children:"List"})," component can wrap ",(0,t.jsx)(n.code,{children:"ListItem"})," components. For a real world example of this pattern, check out the ",(0,t.jsx)(n.code,{children:"yew-router"})," source code. For a more advanced example, check out the ",(0,t.jsx)(n.code,{children:"nested-list"})," example in the main yew repository."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use yew::html;\r\n\r\nhtml! {\r\n    <List>\r\n        <ListItem value="a" />\r\n        <ListItem value="b" />\r\n        <ListItem value="c" />\r\n    </List>\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use yew::{html, ChildrenWithProps, Component, Html, Properties};\r\n\r\n#[derive(Properties, Clone)]\r\npub struct Props {\r\n    pub children: ChildrenWithProps<ListItem>,\r\n}\r\n\r\npub struct List(Props);\r\nimpl Component for List {\r\n    type Properties = Props;\r\n\r\n    // ...\r\n\r\n    fn view(&self) -> Html {\r\n        html!{{\r\n            for self.0.children.iter().map(|mut item| {\r\n                item.props.value = format!("item-{}", item.props.value);\r\n                item\r\n            })\r\n        }}\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"relevant-examples",children:"Relevant examples"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/yewstack/yew/tree/v0.18/examples/boids",children:"Boids"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/yewstack/yew/tree/v0.18/examples/router",children:"Router"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/yewstack/yew/tree/v0.18/examples/store",children:"Store"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var t=r(6540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);