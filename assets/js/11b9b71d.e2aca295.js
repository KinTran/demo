"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[1448],{4511:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=s(4848),r=s(8453);const i={title:"Choosing a web library"},l=void 0,o={id:"getting-started/choose-web-library",title:"Choosing a web library",description:"Introduction",source:"@site/versioned_docs/version-0.18.0/getting-started/choose-web-library.mdx",sourceDirName:"getting-started",slug:"/getting-started/choose-web-library",permalink:"/demo/docs/0.18.0/getting-started/choose-web-library",draft:!1,unlisted:!1,editUrl:"https://google.com/versioned_docs/version-0.18.0/getting-started/choose-web-library.mdx",tags:[],version:"0.18.0",frontMatter:{title:"Choosing a web library"},sidebar:"docs",previous:{title:"Build a sample app",permalink:"/demo/docs/0.18.0/getting-started/build-a-sample-app"},next:{title:"Examples",permalink:"/demo/docs/0.18.0/getting-started/examples"}},d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Choosing One",id:"choosing-one",level:2}];function a(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(t.p,{children:["Yew apps can be built using either ",(0,n.jsx)(t.a,{href:"https://docs.rs/web-sys",children:(0,n.jsx)(t.code,{children:"web-sys"})})," or ",(0,n.jsx)(t.a,{href:"https://docs.rs/stdweb",children:(0,n.jsx)(t.code,{children:"stdweb"})}),".\r\nThese two crates provide the bindings between Rust and Web APIs. You'll need to choose one or the other when adding\r\n",(0,n.jsx)(t.code,{children:"yew"})," to your cargo dependencies:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-toml",children:'# Choose `web-sys`\r\nyew = "0.17"\r\n\r\n# Choose `stdweb`\r\nyew = { version = "0.17", package = "yew-stdweb" }\n'})}),"\n",(0,n.jsxs)(t.p,{children:["We recommend using ",(0,n.jsx)(t.code,{children:"web-sys"})," due to its support from the ",(0,n.jsx)(t.a,{href:"https://rustwasm.github.io/",children:"Rust / Wasm Working Group"}),"."]}),"\n",(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsxs)(t.p,{children:["Yew will freeze support for ",(0,n.jsx)(t.code,{children:"stdweb"})," at v0.18.\r\nIt will still receive patch fixes, but no new features will be added.\r\nSee ",(0,n.jsx)(t.a,{href:"https://github.com/yewstack/yew/issues/1569",children:"#1569"})]})}),"\n",(0,n.jsx)(t.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,n.jsx)(t.p,{children:"This example illustrates the difference in how the two libraries are used.\r\nYou don't need to run this yourself."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:'// web-sys\r\nlet window: web_sys::Window = web_sys::window().expect("window not available");\r\nwindow.alert_with_message("hello from wasm!").expect("alert failed");\r\n\r\n// stdweb\r\nlet window: stdweb::web::Window = stdweb::web::window();\r\nwindow.alert("hello from wasm!");\r\n\r\n// stdweb with js! macro\r\nuse stdweb::js;\r\nuse stdweb::unstable::TryFrom;\r\nuse stdweb::web::Window;\r\n\r\nlet window_val: stdweb::Value = js!{ return window; }; // <- JS syntax inside!\r\nlet window = Window::try_from(window_val).expect("conversion to window failed");\r\nwindow.alert("hello from wasm!");\n'})}),"\n",(0,n.jsx)(t.p,{children:"The APIs for the two crates differ slightly but they serve roughly the same purpose."}),"\n",(0,n.jsx)(t.h2,{id:"choosing-one",children:"Choosing One"}),"\n",(0,n.jsxs)(t.p,{children:["There are a few different angles to consider when choosing between using ",(0,n.jsx)(t.code,{children:"web-sys"})," and ",(0,n.jsx)(t.code,{children:"stdweb"})," for your app.\r\nNote that it's possible to use both in one app, but to minimize the binary size of your compiled crate it's best to use only one of the two."]}),"\n",(0,n.jsxs)("table",{children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{style:{textAlign:"left"}}),(0,n.jsx)("th",{style:{textAlign:"left"},children:(0,n.jsx)("code",{children:"web-sys"})}),(0,n.jsx)("th",{style:{textAlign:"left"},children:(0,n.jsx)("code",{children:"stdweb"})})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{style:{textAlign:"left"},children:"Project Status"}),(0,n.jsxs)("td",{style:{textAlign:"left"},children:[(0,n.jsxs)(t.p,{children:["Actively maintained by the"," "]}),(0,n.jsx)("a",{href:"https://rustwasm.github.io/",children:(0,n.jsx)(t.p,{children:"Rust / Wasm Working Group"})})]}),(0,n.jsx)("td",{style:{textAlign:"left"},children:(0,n.jsx)(t.p,{children:"No Github activity for over 8 months"})})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{style:{textAlign:"left"},children:"Web API Coverage"}),(0,n.jsx)("td",{style:{textAlign:"left"},children:(0,n.jsx)(t.p,{children:"Rust APIs are generated from the Web IDL spec"})}),(0,n.jsx)("td",{style:{textAlign:"left"},children:(0,n.jsx)(t.p,{children:"Browser APIs are added as needed by the community"})})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{style:{textAlign:"left"},children:"Rust API Design"}),(0,n.jsx)("td",{style:{textAlign:"left"},children:(0,n.jsxs)(t.p,{children:["Takes conservative approach by returning ",(0,n.jsx)("code",{children:"Result"})," for\r\nmost API calls"]})}),(0,n.jsx)("td",{style:{textAlign:"left"},children:(0,n.jsxs)(t.p,{children:["Often avoids ",(0,n.jsx)("code",{children:"Result"})," in favor of panics. For\r\ninstance, ",(0,n.jsx)("code",{children:"stdweb::web::window()"})," will panic when\r\ncalled in a worker"]})})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{style:{textAlign:"left"},children:"Supported Build Tools"}),(0,n.jsxs)("td",{style:{textAlign:"left"},children:[(0,n.jsx)("p",{}),(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:(0,n.jsx)("code",{children:"trunk"})}),(0,n.jsx)("li",{children:(0,n.jsx)("code",{children:"wasm-pack"})})]})]}),(0,n.jsxs)("td",{style:{textAlign:"left"},children:[(0,n.jsx)("p",{}),(0,n.jsx)("ul",{children:(0,n.jsx)("li",{children:(0,n.jsx)("code",{children:"cargo-web"})})})]})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{style:{textAlign:"left"},children:"Supported Targets"}),(0,n.jsx)("td",{style:{textAlign:"left"},children:(0,n.jsx)("ul",{children:(0,n.jsx)("li",{children:(0,n.jsx)("code",{children:"wasm32-unknown-unknown"})})})}),(0,n.jsx)("td",{style:{textAlign:"left"},children:(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:(0,n.jsx)("code",{children:"wasm32-unknown-unknown"})}),(0,n.jsx)("li",{children:(0,n.jsx)("code",{children:"wasm32-unknown-emscripten"})}),(0,n.jsx)("li",{children:(0,n.jsx)("code",{children:"asmjs-unknown-emscripten"})})]})})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>o});var n=s(6540);const r={},i=n.createContext(r);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);