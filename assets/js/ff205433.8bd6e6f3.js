"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[8012],{5227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=n(4848),o=n(8453);const i={title:"Router",description:"Yew's official router"},s=void 0,c={id:"concepts/router",title:"Router",description:"Yew's official router",source:"@site/versioned_docs/version-0.18.0/concepts/router.mdx",sourceDirName:"concepts",slug:"/concepts/router",permalink:"/docs/0.18.0/concepts/router",draft:!1,unlisted:!1,editUrl:"https://google.com/versioned_docs/version-0.18.0/concepts/router.mdx",tags:[],version:"0.18.0",frontMatter:{title:"Router",description:"Yew's official router"},sidebar:"docs",previous:{title:"Format",permalink:"/docs/0.18.0/concepts/services/format"},next:{title:"Agents",permalink:"/docs/0.18.0/concepts/agents"}},a={},d=[{value:"Core Elements",id:"core-elements",level:2},{value:"<code>Route</code>",id:"route",level:3},{value:"<code>RouteService</code>",id:"routeservice",level:3},{value:"<code>RouteAgent</code>",id:"routeagent",level:3},{value:"<code>Switch</code>",id:"switch",level:3},{value:"<code>Router</code>",id:"router",level:3},{value:"How to use the router",id:"how-to-use-the-router",level:2},{value:"Relevant examples",id:"relevant-examples",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://crates.io/crates/yew-router",children:"The router on crates.io"})}),"\n",(0,r.jsx)(t.p,{children:"Routers in Single Page Applications (SPA) handle displaying different pages depending on what the URL is. Instead of the default behavior of requesting a different remote resource when a link is clicked, the router instead sets the URL locally to point to a valid route in your application. The router then detects this change and then decides what to render."}),"\n",(0,r.jsx)(t.h2,{id:"core-elements",children:"Core Elements"}),"\n",(0,r.jsx)(t.h3,{id:"route",children:(0,r.jsx)(t.code,{children:"Route"})}),"\n",(0,r.jsx)(t.p,{children:"Contains a String representing everything after the domain in the url and optionally the state stored in the history API."}),"\n",(0,r.jsx)(t.h3,{id:"routeservice",children:(0,r.jsx)(t.code,{children:"RouteService"})}),"\n",(0,r.jsx)(t.p,{children:"Communicates with the browser to get and set Routes."}),"\n",(0,r.jsx)(t.h3,{id:"routeagent",children:(0,r.jsx)(t.code,{children:"RouteAgent"})}),"\n",(0,r.jsx)(t.p,{children:"Owns a RouteService and is used to coordinate updates when the route changes, either from within the application logic or from an event fired from the browser."}),"\n",(0,r.jsx)(t.h3,{id:"switch",children:(0,r.jsx)(t.code,{children:"Switch"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Switch"})," trait is used to convert a ",(0,r.jsx)(t.code,{children:"Route"})," to and from the implementer of this trait."]}),"\n",(0,r.jsx)(t.h3,{id:"router",children:(0,r.jsx)(t.code,{children:"Router"})}),"\n",(0,r.jsxs)(t.p,{children:["The Router component communicates with ",(0,r.jsx)(t.code,{children:"RouteAgent"})," and will automatically resolve Routes it gets from the agent into switches, which it will expose via a ",(0,r.jsx)(t.code,{children:"render"})," prop that allows specifying how the resulting switch gets converted to ",(0,r.jsx)(t.code,{children:"Html"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"how-to-use-the-router",children:"How to use the router"}),"\n",(0,r.jsxs)(t.p,{children:["First, you want to create a type that represents all the states of your application. Do note that while this typically is an enum, structs are supported as well, and that you can nest other items that implement ",(0,r.jsx)(t.code,{children:"Switch"})," inside."]}),"\n",(0,r.jsxs)(t.p,{children:["Then you should derive ",(0,r.jsx)(t.code,{children:"Switch"})," for your type. For enums, every variant must be annotated with ",(0,r.jsx)(t.code,{children:'#[to = "/some/route"]'}),", or if you use a struct instead, that must appear outside the struct declaration."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:'use yew_router::Switch;\r\n\r\n#[derive(Switch)]\r\nenum AppRoute {\r\n  #[to="/login"]\r\n  Login,\r\n  #[to="/register"]\r\n  Register,\r\n  #[to="/delete_account"]\r\n  Delete,\r\n  #[to="/posts/{id}"]\r\n  ViewPost(i32),\r\n  #[to="/posts/view"]\r\n  ViewPosts,\r\n  #[to="/"]\r\n  Home\r\n}\n'})}),"\n",(0,r.jsxs)(t.admonition,{type:"caution",children:[(0,r.jsxs)(t.p,{children:["Do note that the implementation generated by the derive macro for ",(0,r.jsx)(t.code,{children:"Switch"})," will try to match each\r\nvariant in order from first to last, so if any route could possibly match two of your specified\r\n",(0,r.jsx)(t.code,{children:"to"})," annotations, then the first one will match, and the second will never be tried. For example,\r\nif you defined the following ",(0,r.jsx)(t.code,{children:"Switch"}),", the only route that would be matched would be\r\n",(0,r.jsx)(t.code,{children:"AppRoute::Home"}),"."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:'use yew_router::Switch;\r\n\r\n#[derive(Switch)]\r\nenum AppRoute {\r\n  #[to="/"]\r\n  Home,\r\n  #[to="/login"]\r\n  Login,\r\n  #[to="/register"]\r\n  Register,\r\n  #[to="/delete_account"]\r\n  Delete,\r\n  #[to="/posts/{id}"]\r\n  ViewPost(i32),\r\n  #[to="/posts/view"]\r\n  ViewPosts,\r\n}\n'})})]}),"\n",(0,r.jsxs)(t.p,{children:["You can also capture sections using variations of ",(0,r.jsx)(t.code,{children:"{}"})," within your ",(0,r.jsx)(t.code,{children:'#[to = ""]'})," annotation. ",(0,r.jsx)(t.code,{children:"{}"}),' means capture text until the next separator (either "/", "?", "&", or "#" depending on the context). ',(0,r.jsx)(t.code,{children:"{*}"})," means capture text until the following characters match, or if no characters are present, it will match anything. ",(0,r.jsx)(t.code,{children:"{<number>}"})," means capture text until the specified number of separators are encountered (example: ",(0,r.jsx)(t.code,{children:"{2}"})," will capture until two separators are encountered)."]}),"\n",(0,r.jsxs)(t.p,{children:["For structs and enums with named fields, you must specify the field's name within the capture group like so: ",(0,r.jsx)(t.code,{children:"{user_name}"})," or ",(0,r.jsx)(t.code,{children:"{*:age}"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["The Switch trait works with capture groups that are more structured than just Strings. You can specify any type that implements ",(0,r.jsx)(t.code,{children:"Switch"}),". So you can specify that the capture group is a ",(0,r.jsx)(t.code,{children:"usize"}),", and if the captured section of the URL can't be converted to it, then the variant won't match."]}),"\n",(0,r.jsx)(t.h2,{id:"relevant-examples",children:"Relevant examples"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/yewstack/yew/tree/v0.18/examples/router",children:"Router"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(6540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);